{
  "name": "ADEUNIS - Delta P",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "decoder": "// decode payload to string\r\n// var payloadStr = decodeToString(payload);\r\n\r\n// decode payload to JSON\r\nvar data = decodeToJson(payload);\r\n\r\n/** Helper functions **/\r\n\r\n'use strict';\r\n// var undefined = (void 0); // Paranoia\r\n\r\nfunction decodeToString(payload) {\r\n   return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nif (typeof Object.assign != 'function') {\r\n (function () {\r\n  Object.assign = function (target) {\r\n    //  'use strict';\r\n     // We must check against these specific cases.\r\n     if (target === undefined || target === null) {\r\n      throw new TypeError('Cannot convert undefined or null to object');\r\n     }\r\n\r\n     var output = Object(target);\r\n     for (var index = 1; index < arguments.length; index++) {\r\n      var source = arguments[index];\r\n      if (source !== undefined && source !== null) {\r\n         for (var nextKey in source) {\r\n          if (source.hasOwnProperty(nextKey)) {\r\n             output[nextKey] = source[nextKey];\r\n          }\r\n         }\r\n      }\r\n     }\r\n     return output;\r\n  };\r\n })();\r\n}\r\n\r\n\r\nfunction decodeToJson(payload) {\r\n   // covert payload to string.\r\n   var str = decodeToString(payload);\r\n\r\n   // parse string to JSON\r\n   var data = JSON.parse(str);\r\n   return data;\r\n}\r\n\r\nfunction hexToBytes(hex){\r\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\r\n        bytes.push(parseInt(hex.substr(c, 2), 16));\r\n    return bytes;    \r\n}\r\n\r\n/** ADEUNIS CODEC **/\r\n\r\nfunction Buffer(string, encoding) {\r\n    return fromHexString(string);\r\n}\r\n\r\nBuffer.from = function (string, encoding) {\r\n    return fromHexString(string);\r\n};\r\n\r\nBuffer.alloc = function (length) {\r\n    return new Uint8Array(length);\r\n};\r\n\r\nUint8Array.prototype.readUInt16BE = function (offset) {\r\n    var dataView = new DataView(this.buffer);\r\n    return dataView.getUint16(offset);\r\n};\r\n\r\nUint8Array.prototype.readInt16BE = function (offset) {\r\n    var dataView = new DataView(this.buffer);\r\n    return dataView.getInt16(offset);\r\n};\r\n\r\nUint8Array.prototype.readUInt8 = function (offset) {\r\n    var dataView = new DataView(this.buffer);\r\n    return dataView.getUint8(offset);\r\n};\r\n\r\nUint8Array.prototype.readUInt32BE = function (offset) {\r\n    var dataView = new DataView(this.buffer);\r\n    return dataView.getUint32(offset);\r\n};\r\n\r\nUint8Array.prototype.writeUInt16BE = function (value, offset) {\r\n    var dataView = new DataView(this.buffer);\r\n    return dataView.setUint16(offset, value);\r\n};\r\n\r\nUint8Array.prototype.writeUInt8 = function (value, offset) {\r\n    var dataView = new DataView(this.buffer);\r\n    return dataView.setUint8(offset, value);\r\n};\r\n\r\nUint8Array.prototype.writeUInt32BE = function (value, offset) {\r\n    var dataView = new DataView(this.buffer);\r\n    return dataView.setUint32(offset, value);\r\n};\r\n\r\nUint8Array.prototype.toString = function () {\r\n    return toHexString(this);\r\n};\r\n\r\n/**\r\n * From hex string\r\n * @param {string} hexString \r\n */\r\nfunction fromHexString(hexString) {\r\n    var matches = hexString.match(/.{1,2}/g);\r\n    if (!matches) {\r\n        return new Uint8Array();\r\n    }\r\n\r\n    return new Uint8Array(\r\n        matches.map(function (byte) {\r\n            return parseInt(byte, 16);\r\n        })\r\n    );\r\n}\r\n\r\n/**\r\n * To hex string\r\n * @param {Uint8Array} bytes \r\n */\r\nfunction toHexString(bytes) {\r\n    var newBytes = JSON.parse(bytes);\r\n    return newBytes.reduce(function (str, byte) {\r\n        return str + byte.toString(16).padStart(2, '0');\r\n    }, '');\r\n}\r\n\r\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Decoder class.\r\n     *\r\n     * Main class for decoding purposes.\r\n     * Contains declaration of all required parsers and decode() method (API entry point).\r\n     *\r\n     * See below for explanations on parsers.\r\n     */\r\n    var DecoderCore = /** @class */ (function () {\r\n        /**\r\n         * Constructor\r\n         * @param options option object\r\n         *   option.codecStorage: implementation of CodecStorage to use for external storage, leave blank if unknown\r\n         */\r\n        function DecoderCore(options) {\r\n            /**\r\n             * Parsers declaration.\r\n             *\r\n             * Array of parser implementations that can be used by the library.\r\n             *\r\n             * Parsers are specific handlers for parsing frame of a device type and a frame code.\r\n             */\r\n            this.parsers = [];\r\n            if (options && options.codecStorage) {\r\n                // External storage: Node-RED...\r\n                this.codecStorage = options.codecStorage;\r\n            }\r\n            // else if (typeof localStorage !== 'undefined') {\r\n            //     // Local storage: browser\r\n            //     this.codecStorage = localStorage;\r\n            // }\r\n            else {\r\n                // Default (JS object)\r\n                this.codecStorage = new codec.InternalCodecStorage();\r\n            }\r\n            // TODO: check parsers uniqueness\r\n        }\r\n        /**\r\n         * Get supported device types and frame codes.\r\n         *\r\n         * The returned pairs are available for decoding.\r\n         */\r\n        DecoderCore.prototype.getSupported = function () {\r\n            var list = [];\r\n            this.parsers\r\n                .map(function (p) { return (p.deviceType.split('|').map(function (q) { return list.push({\r\n                deviceType: q,\r\n                frameCode: p.frameCode\r\n            }); })); });\r\n            return list;\r\n        };\r\n        /**\r\n         * Find device types\r\n         * @param payloadString payload as hexadecimal string\r\n         */\r\n        DecoderCore.prototype.findDeviceTypes = function (payloadString) {\r\n            // Check arguments\r\n            if (!/^(?:[0-9a-f]{2}){2,}$/gi.test(payloadString)) {\r\n                return [];\r\n            }\r\n            // Get buffer and frame code\r\n            var payload = Buffer.from(payloadString, 'hex');\r\n            var frameCode = payload[0];\r\n            var deviceTypesFull = this.parsers\r\n                .filter(function (p) { return p.frameCode === frameCode; })\r\n                .map(function (p) { return p.deviceType; });\r\n            return Array.from(new Set(deviceTypesFull));\r\n        };\r\n        /**\r\n         * Decode given payload.\r\n         * @param payloadString payload as hexadecimal string\r\n         * @param devId device ID: LoRa device EUI or Sigfox ID, leave blank if unknown\r\n         * @param network network: lora868 or sigfox\r\n         * @returns decoded data as JSON object\r\n         */\r\n        DecoderCore.prototype.decode = function (payloadString, devId, network) {\r\n            if (devId === void 0) { devId = 'tmpDevId'; }\r\n            if (network === void 0) { network = 'unknown'; }\r\n            // Check arguments\r\n            if (!/^(?:[0-9a-f]{2}){2,}$/gi.test(payloadString)) {\r\n                return { type: 'Invalid' };\r\n            }\r\n            // Get buffer and frame code\r\n            var payload = Buffer.from(payloadString, 'hex');\r\n            var frameCode = payload[0];\r\n            // Handle device type\r\n            var deviceType = this.fetchDeviceType(devId);\r\n            // Handle configuration\r\n            var configuration;\r\n            // if (frameCode === 0x10) {\r\n            //     configuration = payload;\r\n            //     this.storeConfiguration(configuration, devId);\r\n            // }\r\n            // else {\r\n            //     configuration = this.fetchConfiguration(devId);\r\n            // }\r\n            // Handle specific parsing\r\n            var activeParsers = this.getActiveParsers(deviceType, frameCode);\r\n            var partialContents = activeParsers.map(function (p) {\r\n                var partialContent;\r\n                try {\r\n                    partialContent = p.parseFrame(payload, configuration, network, deviceType);\r\n                }\r\n                catch (error) {\r\n                    partialContent = { 'error': error.toString() };\r\n                }\r\n                return partialContent;\r\n            });\r\n            // Handle unsupported\r\n            if (activeParsers.every(function (p) { return p.frameCode < 0; })) {\r\n                partialContents.push({ type: 'Unsupported' });\r\n            }\r\n            // Merge partial contents\r\n            var content = Object.assign.apply(Object, [{}].concat(partialContents));\r\n            // Put 'type' at first position\r\n            var typestr = content['type'];\r\n            delete content['type'];\r\n            content = Object.assign({ type: typestr }, content);\r\n            return content;\r\n        };\r\n        /**\r\n         * Set device type for given device ID.\r\n         *\r\n         * Gives additional information to the library to provide better decoding.\r\n         * The library can also guess device type from passed frames in decode() method. Use this method when the frame\r\n         * to decode does not refer to a single device type (example: 0x10 frames).\r\n         *\r\n         * @param deviceType device type, must be a value from getSupported() method\r\n         * @param devId device ID: LoRa device EUI or Sigfox ID\r\n         */\r\n        DecoderCore.prototype.setDeviceType = function (deviceType, devId) {\r\n            if (devId === void 0) { devId = 'tmpDevId'; }\r\n            this.codecStorage.setItem(devId + \".deviceType\", deviceType);\r\n        };\r\n        /**\r\n         * Clear stored data for a device ID:\r\n         *   - Device type\r\n         *   - Configuration\r\n         * @param devId device ID: LoRa device EUI or Sigfox ID, leave blank if unknown\r\n         */\r\n        DecoderCore.prototype.clearStoredData = function (devId) {\r\n            var _this = this;\r\n            if (!devId) {\r\n                devId = 'tmpDevId';\r\n            }\r\n            ['deviceType', 'configuration']\r\n                .map(function (suffix) { return devId + \".\" + suffix; })\r\n                .forEach(function (key) { return _this.codecStorage.removeItem(key); });\r\n        };\r\n        /**\r\n         * Fetch configuration frame\r\n         * @param devId device ID\r\n         */\r\n        DecoderCore.prototype.fetchConfiguration = function (devId) {\r\n            if (!devId) {\r\n                return Buffer.from('');\r\n            }\r\n            var value = this.codecStorage.getItem(devId + \".configuration\");\r\n            return Buffer.from(value || '', 'hex');\r\n        };\r\n        /**\r\n         * Store configuration frame\r\n         * @param payload payload\r\n         * @param devId device ID\r\n         */\r\n        DecoderCore.prototype.storeConfiguration = function (payload, devId) {\r\n            if (!devId) {\r\n                return payload;\r\n            }\r\n            this.codecStorage.setItem(devId + \".configuration\", payload.toString('hex'));\r\n            return payload;\r\n        };\r\n        /**\r\n         * Fetch device type\r\n         * @param devId device ID\r\n         */\r\n        DecoderCore.prototype.fetchDeviceType = function (devId) {\r\n            if (!devId) {\r\n                return '';\r\n            }\r\n            return this.codecStorage.getItem(devId + \".deviceType\") || '';\r\n        };\r\n        /**\r\n         * Store device type\r\n         * @param frameCode frame code\r\n         * @param devId device ID\r\n         */\r\n        DecoderCore.prototype.storeDeviceType = function (frameCode, devId) {\r\n            var deviceType = '';\r\n            if (!devId) {\r\n                return deviceType;\r\n            }\r\n            var matchingParsers = this.parsers.filter(function (p) { return p.deviceType !== 'any' && p.frameCode === frameCode; });\r\n            if (matchingParsers.length === 1) {\r\n                deviceType = matchingParsers[0].deviceType;\r\n                this.codecStorage.setItem(devId + \".deviceType\", deviceType);\r\n            }\r\n            return deviceType;\r\n        };\r\n        /**\r\n         * Analyze deviceType string of the specified parser and check if it's compatible\r\n         * @param parser parser to check\r\n         * @param deviceType deviceType to check\r\n         */\r\n        DecoderCore.prototype.isCompatibleDeviceType = function (parser, deviceType) {\r\n            // A parser may supported a list of devices (string split with '|'). Do not include 'any' parsers (managed later)\r\n            var list = parser.deviceType.split('|').filter(function (q) { return q === deviceType; });\r\n            return (list.length > 0) ? true : false;\r\n        };\r\n        /**\r\n         * Get active parsers\r\n         * @param deviceType device type\r\n         * @param frameCode frame code\r\n         */\r\n        DecoderCore.prototype.getActiveParsers = function (deviceType, frameCode) {\r\n            var _this = this;\r\n            var activeParsers = [];\r\n            // Behavior: find if a specific parser exists for this deviceType\r\n            //           otherwise try to find a ganeric parser\r\n            //           if at least one parser has been found, add a status byte parser (specific or generic)\r\n            // Device type is known, get parsers for given device type AND frame code\r\n            var dataParser = this.parsers.filter(function (p) { return _this.isCompatibleDeviceType(p, deviceType) &&\r\n                (p.frameCode < 0 || p.frameCode === frameCode); });\r\n            // If not custom decoder found, use a generic one\r\n            // Repeater has only specific parsers. Do not add generic ones\r\n            if (dataParser.length === 0 && deviceType !== 'repeater') {\r\n                var genericParsers = this.parsers.filter(function (p) { return p.deviceType === 'any' &&\r\n                    (p.frameCode < 0 || p.frameCode === frameCode); });\r\n                dataParser = activeParsers.concat(genericParsers);\r\n            }\r\n            // Find the status byte parser: only if the frame is managed\r\n            if (dataParser.length > 0) {\r\n                var statusByteParsers = this.parsers.filter(function (p) { return _this.isCompatibleDeviceType(p, deviceType)\r\n                    && p.frameCode === 0; });\r\n                activeParsers = activeParsers.concat(statusByteParsers);\r\n                if (statusByteParsers.length === 0) {\r\n                    var genericStatusByteParsers = this.parsers.filter(function (p) { return p.deviceType === 'any' && p.frameCode === 0; });\r\n                    activeParsers = activeParsers.concat(genericStatusByteParsers);\r\n                }\r\n            }\r\n            // Status parser must be first in list for a better display\r\n            activeParsers = activeParsers.concat(dataParser);\r\n            // Return active parser\r\n            return activeParsers;\r\n        };\r\n        return DecoderCore;\r\n    }());\r\n    codec.DecoderCore = DecoderCore;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Decoder class.\r\n     *\r\n     * Main class for decoding purposes.\r\n     * Contains declaration of all required parsers and decode() method (API entry point).\r\n     *\r\n     * See below for explanations on parsers.\r\n     */\r\n    var Decoder = /** @class */ (function (_super) {\r\n        __extends(Decoder, _super);\r\n        function Decoder() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            /**\r\n             * Parsers declaration.\r\n             *\r\n             * Array of parser implementations that can be used by the library.\r\n             *\r\n             * Parsers are specific handlers for parsing frame of a device type and a frame code.\r\n             */\r\n            _this.parsers = [\r\n                // 1. Generic parsers not used for REPEATER\r\n                // 2. GenericStatusByteParser() must be allocated only by custom parser.\r\n                // => Default status byte parser must be GenericStatusByteExtParser()\r\n                // new GenericStatusByteParser(),\r\n                new codec.GenericStatusByteParser(),\r\n                new codec.GenericStatusByteExtParser(),\r\n                new codec.Generic0x1fParser(),\r\n                new codec.Generic0x20Parser(),\r\n                new codec.Generic0x2fParser(),\r\n                new codec.Generic0x30Parser(),\r\n                new codec.Generic0x33Parser(),\r\n                new codec.Generic0x51Parser(),\r\n                new codec.Generic0x52Parser(),\r\n                // DELTAP product\r\n                new codec.Deltap0x10Parser(),\r\n                new codec.Deltap0x11Parser(),\r\n                new codec.Deltap0x2fParser(),\r\n                new codec.Deltap0x53Parser(),\r\n                new codec.Deltap0x54Parser(),\r\n                new codec.Deltap0x55Parser(),\r\n                new codec.Deltap0x56Parser(),\r\n            ];\r\n            return _this;\r\n        }\r\n        return Decoder;\r\n    }(codec.DecoderCore));\r\n    codec.Decoder = Decoder;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Internal codec storage\r\n     */\r\n    var InternalCodecStorage = /** @class */ (function () {\r\n        function InternalCodecStorage() {\r\n            this.store = {};\r\n        }\r\n        InternalCodecStorage.prototype.getItem = function (key) {\r\n            return this.store[key];\r\n        };\r\n        InternalCodecStorage.prototype.removeItem = function (key) {\r\n            delete this.store[key];\r\n        };\r\n        InternalCodecStorage.prototype.setItem = function (key, value) {\r\n            this.store[key] = value;\r\n        };\r\n        return InternalCodecStorage;\r\n    }());\r\n    codec.InternalCodecStorage = InternalCodecStorage;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Smart Building 0x1f (TOR configuration) frame parser\r\n     */\r\n    var Generic0x1fParser = /** @class */ (function () {\r\n        function Generic0x1fParser() {\r\n            this.deviceType = 'motion|comfort|deltap';\r\n            this.frameCode = 0x1f;\r\n        }\r\n        Generic0x1fParser.prototype.parseFrame = function (payload, configuration, network) {\r\n            // register 380: Configuration digital input 1\r\n            // register 381: Alarm threshold digital input 1\r\n            // register 382: Configuration digital input 2\r\n            // register 383: Alarm threshold digital input 2\r\n            var appContent = { type: '0x1f digital input configuration' };\r\n            var input1 = {};\r\n            var input2 = {};\r\n            input1['type'] = this.getTypeText(payload[2] & 0x0f);\r\n            input1['debouncingPeriod'] = {\r\n                'unit': 'ms', 'value': this.getDebouncingPeriodText((payload[2] & 0xf0) >> 4)\r\n            };\r\n            input1['threshold'] = payload.readUInt16BE(3);\r\n            input2['type'] = this.getTypeText(payload[5] & 0x0f);\r\n            input2['debouncingPeriod'] = {\r\n                'unit': 'ms', 'value': this.getDebouncingPeriodText((payload[5] & 0xf0) >> 4)\r\n            };\r\n            input2['threshold'] = payload.readUInt16BE(6);\r\n            appContent['digitalInput1'] = input1;\r\n            appContent['digitalInput2'] = input2;\r\n            return appContent;\r\n        };\r\n        /**\r\n         * Get debounce duration text\r\n         * @param value value\r\n         */\r\n        Generic0x1fParser.prototype.getDebouncingPeriodText = function (value) {\r\n            if (value === 0) {\r\n                return 0;\r\n            } else if (value === 1) {\r\n                return 10;\r\n            } else if (value === 2) {\r\n                return 20;\r\n            } else if (value === 3) {\r\n                return 500;\r\n            } else if (value === 4) {\r\n                return 100;\r\n            } else if (value === 5) {\r\n                return 200;\r\n            } else if (value === 6) {\r\n                return 500;\r\n            } else if (value === 7) {\r\n                return 1000;\r\n            } else if (value === 8) {\r\n                return 2000;\r\n            } else if (value === 9) {\r\n                return 5000;\r\n            } else if (value === 10) {\r\n                return 10000;\r\n            } else if (value === 11) {\r\n                return 20000;\r\n            } else if (value === 12) {\r\n                return 40000;\r\n            } else if (value === 13) {\r\n                return 60000;\r\n            } else if (value === 14) {\r\n                return 300000;\r\n            } else if (value === 15) {\r\n                return 600000;\r\n            } else {\r\n                return 0;\r\n            }\r\n        };\r\n        /**\r\n         * Get type text\r\n         * @param value value\r\n         */\r\n        Generic0x1fParser.prototype.getTypeText = function (value) {\r\n            if (value === 0x0) {\r\n                return 'deactivated';\r\n            } else if (value === 0x1) {\r\n                return 'highEdge';\r\n            } else if (value === 0x2) {\r\n                return 'lowEdge';\r\n            } else if (value === 0x3) {\r\n                return 'bothEdges';\r\n            } else {\r\n                return '';\r\n            }\r\n        };\r\n        return Generic0x1fParser;\r\n    }());\r\n    codec.Generic0x1fParser = Generic0x1fParser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Generic 0x20 (configuration) frame parser\r\n     */\r\n    var Generic0x20Parser = /** @class */ (function () {\r\n        function Generic0x20Parser() {\r\n            this.deviceType = 'any';\r\n            this.frameCode = 0x20;\r\n        }\r\n        Generic0x20Parser.prototype.parseFrame = function (payload, configuration, network, deviceType) {\r\n            var appContent = { type: '0x20 Configuration' };\r\n            // Content depends on network\r\n            if (payload.byteLength === 4) {\r\n                appContent['loraAdr'] = Boolean(payload[2] & 0x01);\r\n                appContent['loraProvisioningMode'] = (payload[3] === 0) ? 'ABP' : 'OTAA';\r\n                // TEMP3 , TEMP4 and PULSE3 use FW 2.0.0 . In that case byte 2 contains the entire S220 register\r\n                if (deviceType !== 'analog' && deviceType !== 'drycontacts'\r\n                    && deviceType !== 'pulse' && deviceType !== 'temp') {\r\n                    appContent['loraDutycyle'] = (payload[2] & 0x04) ? 'activated' : 'deactivated';\r\n                    appContent['loraClassMode'] = (payload[2] & 0x20) ? 'CLASS C' : 'CLASS A';\r\n                }\r\n            } else if (payload.byteLength === 5) {\r\n                    appContent['sigfoxRetry'] = (payload[2] & 0x03);\r\n                if (payload.byteLength === 5) {\r\n                    appContent['sigfoxDownlinkPeriod'] = { 'unit': 'm', 'value': payload.readInt16BE(3) };\r\n                }\r\n            } else {\r\n                appContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;\r\n            }\r\n            return appContent;\r\n        };\r\n        return Generic0x20Parser;\r\n    }());\r\n    codec.Generic0x20Parser = Generic0x20Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Generic 0x2f (downlink ACK) frame parser\r\n     */\r\n    var Generic0x2fParser = /** @class */ (function () {\r\n        function Generic0x2fParser() {\r\n            this.deviceType = 'dc';\r\n            this.frameCode = 0x2f;\r\n        }\r\n        Generic0x2fParser.prototype.parseFrame = function (payload, configuration) {\r\n            var appContent = { type: '0x2f Downlink ack' };\r\n            appContent['downlinkFramecode'] = '0x' + payload[2].toString(16);\r\n            appContent['requestStatus'] = this.getRequestStatusText(payload[3]);\r\n            return appContent;\r\n        };\r\n        /**\r\n         * Get Type text\r\n         * @param value value\r\n         */\r\n        Generic0x2fParser.prototype.getRequestStatusText = function (value) {\r\n            if(value === 1) {\r\n                return 'success';\r\n            } else if (value === 2) {\r\n                return 'errorGeneric';\r\n            } else if (value === 3) {\r\n                return 'errorWrongState';\r\n            } else if (value === 4) {\r\n                return 'errorInvalidRequest';\r\n            } else {\r\n                return 'errorOtherReason';\r\n            }\r\n        };\r\n        return Generic0x2fParser;\r\n    }());\r\n    codec.Generic0x2fParser = Generic0x2fParser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Generic 0x30 (keep alive) frame parser\r\n     */\r\n    var Generic0x30Parser = /** @class */ (function () {\r\n        function Generic0x30Parser() {\r\n            this.deviceType = 'any';\r\n            this.frameCode = 0x30;\r\n        }\r\n        Generic0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = { type: '0x30 Keep alive' };\r\n            return appContent;\r\n        };\r\n        return Generic0x30Parser;\r\n    }());\r\n    codec.Generic0x30Parser = Generic0x30Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Generic 0x33 (Response to Set Register downlink) frame parser\r\n     */\r\n    var Generic0x33Parser = /** @class */ (function () {\r\n        function Generic0x33Parser() {\r\n            this.deviceType = 'dc|pulse3|temp3|comfort|motion||deltap';\r\n            this.frameCode = 0x33;\r\n        }\r\n        Generic0x33Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = { type: '0x33 Set register status' };\r\n            appContent['requestStatus'] = this.getRequestStatusText(payload[2]);\r\n            appContent['registerId'] = payload.readUInt16BE(3);\r\n            return appContent;\r\n        };\r\n        /**\r\n         * Get Type text\r\n         * @param value value\r\n         */\r\n        Generic0x33Parser.prototype.getRequestStatusText = function (value) {\r\n            if (value === 1) {\r\n                return 'success';\r\n            } else if (value === 2) {\r\n                return 'successNoUpdate';\r\n            } else if (value === 3) {\r\n                return 'errorCoherency';\r\n            } else if (value === 4) {\r\n                return 'errorInvalidRegister';\r\n            } else if (value === 5) {\r\n                return 'errorInvalidValue';\r\n            } else if (value === 6) {\r\n                return 'errorTruncatedValue';\r\n            } else if (value === 7) {\r\n                return 'errorAccesNotAllowed';\r\n            } else {\r\n                return 'errorOtherReason';\r\n            }\r\n        };\r\n        return Generic0x33Parser;\r\n    }());\r\n    codec.Generic0x33Parser = Generic0x33Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Smart digital input 1 alarm frame parser\r\n     */\r\n    var Generic0x51Parser = /** @class */ (function () {\r\n        function Generic0x51Parser() {\r\n            this.deviceType = 'motion|comfort|deltap';\r\n            this.frameCode = 0x51;\r\n        }\r\n        Generic0x51Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = { type: '0x51 digital input 1 alarm' };\r\n            appContent['state'] = {\r\n                'previousFrame': Boolean(payload.readUInt8(2) >> 1 & 1),\r\n                'current': Boolean(payload.readUInt8(2) >> 0 & 1)\r\n            };\r\n            appContent['counter'] = {\r\n                'global': payload.readUInt32BE(3),\r\n                'instantaneous': payload.readUInt16BE(7)\r\n            };\r\n            return appContent;\r\n        };\r\n        return Generic0x51Parser;\r\n    }());\r\n    codec.Generic0x51Parser = Generic0x51Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * 0x52 digital input 2 alarm frame parser\r\n     */\r\n    var Generic0x52Parser = /** @class */ (function () {\r\n        function Generic0x52Parser() {\r\n            this.deviceType = 'motion|comfort|deltap';\r\n            this.frameCode = 0x52;\r\n            this.parser = new codec.Generic0x51Parser();\r\n        }\r\n        Generic0x52Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = __assign({}, this.parser.parseFrame(payload, configuration, network), { type: '0x52 digital input 2 alarm' });\r\n            return appContent;\r\n        };\r\n        return Generic0x52Parser;\r\n    }());\r\n    codec.Generic0x52Parser = Generic0x52Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Extended status byte parser\r\n     */\r\n    var GenericStatusByteExtParser = /** @class */ (function () {\r\n        function GenericStatusByteExtParser() {\r\n            this.deviceType = 'any';\r\n            this.frameCode = 0;\r\n        }\r\n        GenericStatusByteExtParser.prototype.parseFrame = function (payload, configuration) {\r\n            var statusContent = {};\r\n            var parser = new codec.GenericStatusByteParser();\r\n            statusContent = parser.parseFrame(payload, configuration);\r\n            // Status byte, applicative flags\r\n            statusContent['configurationInconsistency'] = Boolean(payload[1] & 0x08);\r\n            return { 'status': statusContent };\r\n        };\r\n        return GenericStatusByteExtParser;\r\n    }());\r\n    codec.GenericStatusByteExtParser = GenericStatusByteExtParser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Generic status byte parser\r\n     */\r\n    var GenericStatusByteParser = /** @class */ (function () {\r\n        function GenericStatusByteParser() {\r\n            this.deviceType = 'any';\r\n            this.frameCode = 0;\r\n        }\r\n        GenericStatusByteParser.prototype.parseFrame = function (payload, configuration) {\r\n            var statusContent = {};\r\n            statusContent['frameCounter'] = (payload[1] & 0xe0) >> 5;\r\n            statusContent['hardwareError'] = Boolean(payload[1] & 0x04);\r\n            statusContent['lowBattery'] = Boolean(payload[1] & 0x02);\r\n            statusContent['configurationDone'] = Boolean(payload[1] & 0x01);\r\n            return statusContent;\r\n        };\r\n        return GenericStatusByteParser;\r\n    }());\r\n    codec.GenericStatusByteParser = GenericStatusByteParser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Delta P 0x10 (configuration) frame parser\r\n     */\r\n    var Deltap0x10Parser = /** @class */ (function () {\r\n        function Deltap0x10Parser() {\r\n            this.deviceType = 'deltap';\r\n            this.frameCode = 0x10;\r\n        }\r\n        Deltap0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            // register 300: Emission period of the life frame\r\n            // register 301: Issue period, value between 0 and 65535, 0: disabling periodic transmission\r\n            // register 320: value betwenn 1 and 65535\r\n            // register 321: value betwenn 0 and 65535, 0: no scanning, X2s\r\n            // reading_frequency = S321 * S320\r\n            // sending_frequency = S321 * S320 * S301\r\n            var appContent = { type: '0x10 Delta P configuration' };\r\n            appContent['transmissionPeriodKeepAlive'] = { 'unit': 's', 'value': payload.readUInt16BE(2) * 10 },\r\n                appContent['numberOfHistorizationBeforeSending'] = payload.readUInt16BE(4),\r\n                appContent['numberOfSamplingBeforeHistorization'] = payload.readUInt16BE(6),\r\n                appContent['samplingPeriod'] = { 'unit': 's', 'value': payload.readUInt16BE(8) * 2 },\r\n                appContent['calculatedPeriodRecording'] = { 'unit': 's',\r\n                    'value': payload.readUInt16BE(8) * payload.readUInt16BE(6) * 2 },\r\n                appContent['calculatedSendingPeriod'] = { 'unit': 's',\r\n                    'value': payload.readUInt16BE(8) * payload.readUInt16BE(6) * payload.readUInt16BE(4) * 2 };\r\n            return appContent;\r\n        };\r\n        return Deltap0x10Parser;\r\n    }());\r\n    codec.Deltap0x10Parser = Deltap0x10Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Delta P 0x11 (0-10V configuration) frame parser\r\n     */\r\n    var Deltap0x11Parser = /** @class */ (function () {\r\n        function Deltap0x11Parser() {\r\n            this.deviceType = 'deltap';\r\n            this.frameCode = 0x11;\r\n        }\r\n        Deltap0x11Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            // register 322: value between 1 and 65535\r\n            // register 323: value between 0 and 65535, 0: no scanning, X2s\r\n            // register 324: Issue period, value between 0 and 65535, 0: disabling periodic transmission\r\n            // reading_frequency = S322 * S323\r\n            // sending_frequency = S322 * S323 * S324\r\n            var appContent = { type: '0x11 Delta P 0-10V configuration' };\r\n            appContent['numberOfHistorizationBeforeSending'] = payload.readUInt16BE(6);\r\n            appContent['numberOfSamplingBeforeHistorization'] = payload.readUInt16BE(2);\r\n            appContent['samplingPeriod'] = { 'unit': 's', 'value': payload.readUInt16BE(4) * 2 };\r\n            appContent['calculatedPeriodRecording'] = { 'unit': 's',\r\n                'value': payload.readUInt16BE(2) * payload.readUInt16BE(4) * 2 };\r\n            appContent['calculatedSendingPeriod'] = { 'unit': 's',\r\n                'value': payload.readUInt16BE(2) * payload.readUInt16BE(4) * payload.readUInt16BE(6) * 2 };\r\n            return appContent;\r\n        };\r\n        return Deltap0x11Parser;\r\n    }());\r\n    codec.Deltap0x11Parser = Deltap0x11Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Generic 0x2f (downlink ACK) frame parser\r\n     */\r\n    var Deltap0x2fParser = /** @class */ (function () {\r\n        function Deltap0x2fParser() {\r\n            this.deviceType = 'deltap';\r\n            this.frameCode = 0x2f;\r\n        }\r\n        Deltap0x2fParser.prototype.parseFrame = function (payload, configuration) {\r\n            var appContent = { type: '0x2f Delta P Downlink ack' };\r\n            appContent['requestStatus'] = this.getRequestStatusText(payload[2]);\r\n            return appContent;\r\n        };\r\n        /**\r\n         * Get Type text\r\n         * @param value value\r\n         */\r\n        Deltap0x2fParser.prototype.getRequestStatusText = function (value) {\r\n            if (value === 1) {\r\n                return 'success';\r\n            } else if (value === 2) {\r\n                return 'errorGeneric';\r\n            } else if (value === 3) {\r\n                return 'errorWrongState';\r\n            } else if (value === 4) {\r\n                return 'errorInvalidRequest';\r\n            } else {\r\n                return 'errorOtherReason';\r\n            }\r\n        };\r\n        return Deltap0x2fParser;\r\n    }());\r\n    codec.Deltap0x2fParser = Deltap0x2fParser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Delta P 0x53 (Delta P periodic) frame parser\r\n     */\r\n    var Deltap0x53Parser = /** @class */ (function () {\r\n        function Deltap0x53Parser() {\r\n            this.deviceType = 'deltap';\r\n            this.frameCode = 0x53;\r\n        }\r\n        Deltap0x53Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = { type: '0x53 Delta P periodic data' };\r\n            var pressures = [];\r\n            // Loop through historic data [t=0, t-1, t-2,...]\r\n            for (var offset = 2; offset < payload.byteLength; offset += 2) {\r\n                pressures.push(payload.readInt16BE(offset));\r\n            }\r\n            appContent['decodingInfo'] = 'values: [t=0, t-1, t-2, ...]';\r\n            appContent['deltaPressure'] = { 'unit': 'pa', 'values': pressures };\r\n            return appContent;\r\n        };\r\n        return Deltap0x53Parser;\r\n    }());\r\n    codec.Deltap0x53Parser = Deltap0x53Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Delta P 0x54 (pressure alarm) frame parser\r\n     */\r\n    var Deltap0x54Parser = /** @class */ (function () {\r\n        function Deltap0x54Parser() {\r\n            this.deviceType = 'deltap';\r\n            this.frameCode = 0x54;\r\n        }\r\n        Deltap0x54Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = { type: '0x54 Delta P alarm' };\r\n            // Bit 0: alarm pressure state (0: inactive, 1: active)\r\n            appContent['alarmStatus'] = payload.readUInt8(2) ? 'active' : 'inactive';\r\n            // Pressure value\r\n            appContent['deltaPressure'] = { 'unit': 'pa', 'value': payload.readInt16BE(3) };\r\n            return appContent;\r\n        };\r\n        return Deltap0x54Parser;\r\n    }());\r\n    codec.Deltap0x54Parser = Deltap0x54Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Delta P 0x55 (periodic 0-10 V) frame parser\r\n     */\r\n    var Deltap0x55Parser = /** @class */ (function () {\r\n        function Deltap0x55Parser() {\r\n            this.deviceType = 'deltap';\r\n            this.frameCode = 0x55;\r\n        }\r\n        Deltap0x55Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = { type: '0x55 Delta P - periodic 0-10 V' };\r\n            var voltages = [];\r\n            // Loop through historic data [t=0, t-1, t-2,...]\r\n            for (var offset = 2; offset < payload.byteLength; offset += 2) {\r\n                voltages.push(payload.readInt16BE(offset));\r\n            }\r\n            appContent['decodingInfo'] = 'values: [t=0, t-1, t-2, ...]';\r\n            appContent['voltage'] = { 'unit': 'mV', 'values': voltages };\r\n            return appContent;\r\n        };\r\n        return Deltap0x55Parser;\r\n    }());\r\n    codec.Deltap0x55Parser = Deltap0x55Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    /**\r\n     * Delta P 0x56 (alarm 0-10 V) frame parser\r\n     */\r\n    var Deltap0x56Parser = /** @class */ (function () {\r\n        function Deltap0x56Parser() {\r\n            this.deviceType = 'deltap';\r\n            this.frameCode = 0x56;\r\n        }\r\n        Deltap0x56Parser.prototype.parseFrame = function (payload, configuration, network) {\r\n            var appContent = { type: '0x56 Delta P - alarm 0-10 V' };\r\n            // Bit 0: alarm state (0: inactive, 1:active)\r\n            appContent['alarmStatus'] = payload.readUInt8(2) ? 'active' : 'inactive';\r\n            // Voltage value (in mV)\r\n            appContent['voltage'] = { 'unit': 'mV', 'value': payload.readInt16BE(3) };\r\n            return appContent;\r\n        };\r\n        return Deltap0x56Parser;\r\n    }());\r\n    codec.Deltap0x56Parser = Deltap0x56Parser;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    var PartialDecodingReason;\r\n    (function (PartialDecodingReason) {\r\n        PartialDecodingReason[PartialDecodingReason[\"NONE\"] = 0] = \"NONE\";\r\n        PartialDecodingReason[PartialDecodingReason[\"MISSING_NETWORK\"] = 1] = \"MISSING_NETWORK\";\r\n        PartialDecodingReason[PartialDecodingReason[\"MISSING_CONFIGURATION\"] = 2] = \"MISSING_CONFIGURATION\";\r\n    })(PartialDecodingReason = codec.PartialDecodingReason || (codec.PartialDecodingReason = {}));\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    var ContentImpl = /** @class */ (function () {\r\n        function ContentImpl(type) {\r\n            if (type === void 0) { type = 'Unknown'; }\r\n            this.type = type;\r\n            this.partialDecoding = codec.PartialDecodingReason.NONE;\r\n        }\r\n        ContentImpl.merge = function () {\r\n            var contents = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                contents[_i] = arguments[_i];\r\n            }\r\n            if (!contents || contents.length === 0) {\r\n                return null;\r\n            }\r\n            return Object.assign.apply(Object, [new ContentImpl(contents[0].type)].concat(contents));\r\n        };\r\n        ContentImpl.prototype.merge = function () {\r\n            var contents = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                contents[_i] = arguments[_i];\r\n            }\r\n            return ContentImpl.merge.apply(ContentImpl, [this].concat(contents));\r\n        };\r\n        return ContentImpl;\r\n    }());\r\n    codec.ContentImpl = ContentImpl;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    var PlateformCommonUtils = /** @class */ (function () {\r\n        function PlateformCommonUtils() {\r\n        }\r\n        /**\r\n         * Get Product Mode text\r\n         * @param value value\r\n         */\r\n        PlateformCommonUtils.getProductModeText = function (value) {\r\n            if (value === 0) {\r\n                return 'PARK';\r\n            } else if (value === 1) {\r\n                return 'PRODUCTION';\r\n            } else if (value === 2) {\r\n                return 'TEST';\r\n            } else if (value === 3) {\r\n                return 'DEAD';\r\n            } else {\r\n                return '';\r\n            }\r\n        };\r\n        return PlateformCommonUtils;\r\n    }());\r\n    codec.PlateformCommonUtils = PlateformCommonUtils;\r\n})(codec || (codec = {}));\r\nvar codec;\r\n(function (codec) {\r\n    var DecoderProducts;\r\n    (function (DecoderProducts) {\r\n        DecoderProducts[\"analog\"] = \"Analog\";\r\n        DecoderProducts[\"comfort\"] = \"Comfort\";\r\n        DecoderProducts[\"dc\"] = \"Dry Contacts\";\r\n        DecoderProducts[\"deltap\"] = \"Delta P\";\r\n        DecoderProducts[\"motion\"] = \"Motion\";\r\n        DecoderProducts[\"pulse\"] = \"Pulse\";\r\n        DecoderProducts[\"pulse3\"] = \"Pulse 3\";\r\n        DecoderProducts[\"repeater\"] = \"Repeater\";\r\n        DecoderProducts[\"temp\"] = \"Temp\";\r\n        DecoderProducts[\"temp3\"] = \"Temp 3\";\r\n        DecoderProducts[\"ticCbeLinkyMono\"] = \"TIC CBE/LINKY MONO\";\r\n        DecoderProducts[\"ticCbeLinkyTri\"] = \"TIC CBE/LINKY TRI\";\r\n    })(DecoderProducts = codec.DecoderProducts || (codec.DecoderProducts = {}));\r\n})(codec || (codec = {}));\r\n\r\nfunction base64tohex(bytes) {\r\n    return bytes.map(function (byte) {\r\n        return (\"00\" + (byte & 0xFF).toString(16)).slice(-2)\r\n    }).join('')\r\n}\r\n\r\nfunction Decoder(bytes, port) {\r\n    var decoder = new codec.Decoder();\r\n    decoder.setDeviceType(\"deltap\");\r\n\r\n    return decoder.decode(base64tohex(bytes));\r\n}\r\n\r\n\r\n\r\n\r\n/** MSG GENERE **/\r\n\r\n// Cette fonction sera utilisée pour pousser les valeurs absolues de l'array \"values\" à partir de i=1 jusqu'à la dernière valeur dans un nouvel array\r\nfunction absoluteValuesArray(arrayInput){\r\n    return arrayInput.map(function(e) { return Math.abs(e) });\r\n}\r\n\r\n// Cette fonction sera utilisée pour pousser les timestamps correspondant aux valeurs d'arrayOutput créé au-dessus\r\n// function pushTimestamps(arrayInput, lastTimestamp){\r\n//     var timestampsOutput = [];\r\n//     if(arrayInput.length > 0){\r\n//         for(var i=1; i < arrayInput.length; i++){\r\n//             var newTimestamp = (parseInt(lastTimestamp) - 3600*i)*1000;\r\n//             timestampsOutput.push(newTimestamp);\r\n//         }\r\n//     }\r\n//     return timestampsOutput;\r\n// }\r\n\r\n\r\n// POUR LE TEST !!!\r\n// function pushTimestamps(arrayInput, lastTimestamp){\r\n//     var timestampsOutput = [];\r\n//     if(arrayInput.length > 0){\r\n//         for(var i=1; i < arrayInput.length; i++){\r\n//             var newTimestamp = (parseInt(lastTimestamp) - 60*i)*1000;\r\n//             timestampsOutput.push(newTimestamp);\r\n//         }\r\n//     }\r\n//     return timestampsOutput;\r\n// }\r\n\r\n// function timeConverter(UNIX_timestamp){\r\n//   var a = new Date(UNIX_timestamp);\r\n//   var months = ['Janvier','Févier','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'];\r\n//   var days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\r\n//   var year = a.getFullYear();\r\n//   var month = months[a.getMonth()];\r\n//   var day = days[a.getDay()];\r\n//   var date = a.getDate() < 10 ? '0' + a.getDate() : a.getDate();\r\n//   var hour = a.getHours() < 10 ? '0' + a.getHours() : a.getHours();\r\n//   var min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\r\n//   var sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\r\n//   var time = day + ' ' + date + ' ' + month + ' ' + year + ' - ' + hour + ':' + min + ':' + sec ;\r\n//   return time;\r\n// }\r\n\r\nfunction timeConverter(UNIX_timestamp) {\r\n  var a = new Date(UNIX_timestamp);\r\n  var year = a.getFullYear();\r\n  var month = (a.getMonth() + 1) < 10 ? '0' + (a.getMonth() + 1) : (a.getMonth() + 1);\r\n  var date = a.getDate() < 10 ? '0' + a.getDate() : a.getDate();\r\n  var hour = a.getHours() < 10 ? '0' + a.getHours() : a.getHours();\r\n  var min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\r\n  var sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\r\n//   var time = `${year}/${month}/${date} - ${hour}:${min}:${sec}`;\r\n  var time = year + '/' + month + '/' + date + ' - ' + hour + ':' + min + ':' + sec;\r\n  return time;\r\n}\r\n\r\nfunction lqiConverter(lqi) {\r\n    if(lqi === \"Excellent\") {\r\n        return \"Excellent\";\r\n    } else if(lqi === \"Good\") {\r\n        return \"Bon\";\r\n    } else if(lqi === \"Average\") {\r\n        return \"Moyen\";\r\n    } else if(lqi === \"Limit\") {\r\n        return \"Mauvais\";\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// Fonction qui adapte les attributs du payload en fonction du message entrant (deltaPressure ou voltage)\r\nfunction createPayload(payloadDecoded){\r\n    \r\n    var payloadOutput = {};\r\n    var valuesArray = [];\r\n    var timestampsArray = [];\r\n\r\n        // valeurs qui ne dépendent pas du type de message entrant\r\n        payloadOutput = {\r\n            \"deviceName\": data.deviceName,\r\n            \"deviceType\": \"Delta P\",\r\n            \"attributes\": {\r\n                \"deviceName\": data.deviceName,\r\n                \"ts\": data.time*1000,\r\n                \"lastMessage\": timeConverter(data.time*1000),\r\n                \"frameCounter\": payloadDecoded.frameCounter,\r\n                \"hardwareError\": payloadDecoded.hardwareError,\r\n                \"lowBattery\": payloadDecoded.lowBattery,\r\n                \"configurationDone\": payloadDecoded.configurationDone,\r\n                \"configurationInconsistency\": payloadDecoded.status.configurationInconsistency,\r\n                \"signalValue\": lqiConverter(data.lqi),\r\n                \"msgType\": payloadDecoded.type,\r\n                \"indicator\": \"ON\",\r\n            }\r\n        };\r\n        \r\n        if (payloadDecoded.type === \"0x10 Delta P configuration\"){\r\n            payloadOutput.attributes.transmissionPeriodKeepAliveUnit = payloadDecoded.transmissionPeriodKeepAlive.unit;\r\n            payloadOutput.attributes.transmissionPeriodKeepAliveValue = payloadDecoded.transmissionPeriodKeepAlive.value;\r\n            payloadOutput.attributes.pressureNumberOfHistorizationBeforeSending = payloadDecoded.numberOfHistorizationBeforeSending;\r\n            payloadOutput.attributes.pressureNumberOfSamplingBeforeHistorization = payloadDecoded.numberOfSamplingBeforeHistorization;\r\n            payloadOutput.attributes.pressureSamplingPeriodUnit = payloadDecoded.samplingPeriod.unit;\r\n            payloadOutput.attributes.pressureSamplingPeriodValue = payloadDecoded.samplingPeriod.value;\r\n            payloadOutput.attributes.pressureCalculatedPeriodRecordingUnit = payloadDecoded.calculatedPeriodRecording.unit;\r\n            payloadOutput.attributes.pressureCalculatedPeriodRecordingValue = payloadDecoded.calculatedPeriodRecording.value;\r\n            payloadOutput.attributes.pressureCalculatedSendingPeriodUnit = payloadDecoded.calculatedSendingPeriod.unit;\r\n            payloadOutput.attributes.pressureCalculatedSendingPeriodValue = payloadDecoded.calculatedSendingPeriod.value;\r\n            \r\n        } else if(payloadDecoded.type === \"0x11 Delta P 0-10V configuration\"){\r\n            payloadOutput.attributes.voltageNumberOfHistorizationBeforeSending = payloadDecoded.numberOfHistorizationBeforeSending;\r\n            payloadOutput.attributes.voltageNumberOfSamplingBeforeHistorization = payloadDecoded.numberOfSamplingBeforeHistorization;\r\n            payloadOutput.attributes.voltageSamplingPeriodUnit = payloadDecoded.samplingPeriod.unit;\r\n            payloadOutput.attributes.voltageSamplingPeriodValue = payloadDecoded.samplingPeriod.value;\r\n            payloadOutput.attributes.voltageCalculatedPeriodRecordingUnit = payloadDecoded.calculatedPeriodRecording.unit;\r\n            payloadOutput.attributes.voltageCalculatedPeriodRecordingValue = payloadDecoded.calculatedPeriodRecording.value;\r\n            payloadOutput.attributes.voltageCalculatedSendingPeriod = payloadDecoded.calculatedSendingPeriod.unit,\r\n            payloadOutput.attributes.voltageCalculatedSendingPeriodValue = payloadDecoded.calculatedSendingPeriod.value;\r\n        } else if (payloadDecoded.type === \"0x1f digital input configuration\") {\r\n            if(payloadDecoded.digitalInput1 !== undefined){\r\n                payloadOutput.attributes.digitalInput1Type = payloadDecoded.digitalInput1.type;\r\n                payloadOutput.attributes.digitalInput1DebouncingPeriodUnit = payloadDecoded.digitalInput1.debouncingPeriod.unit;\r\n                payloadOutput.attributes.digitalInput1DebouncingPeriodValue = payloadDecoded.digitalInput1.debouncingPeriod.value;\r\n                payloadOutput.attributes.digitalInput1Thresold = payloadDecoded.digitalInput1.thresold;\r\n            }\r\n            if(payloadDecoded.digitalInput2 !== undefined){\r\n                payloadOutput.attributes.digitalInput2Type = payloadDecoded.digitalInput2.type;\r\n                payloadOutput.attributes.digitalInput2DebouncingPeriodUnit = payloadDecoded.digitalInput2.debouncingPeriod.unit;\r\n                payloadOutput.attributes.digitalInput2DebouncingPeriodValue = payloadDecoded.digitalInput2.debouncingPeriod.value;\r\n                payloadOutput.attributes.digitalInput2Thresold = payloadDecoded.digitalInput2.thresold; \r\n            }\r\n        } else if (payloadDecoded.type === \"0x20 Configuration\") {\r\n            payloadOutput.attributes.sigFoxRetry = payloadDecoded.sigForRetry;\r\n        } else if (payloadDecoded.type === \"0x2f Delta P Downlink ack\") {\r\n            payloadOutput.attributes.requestStatus = payloadOutput.requestStatus;\r\n        } else if (payloadDecoded.type === \"0x51 digital input 1 alarm\") {\r\n            payloadOutput.attributes.digitalInput1PreviousAlarmStateFrame = payloadDecoded.state.previousFrame;\r\n            payloadOutput.attributes.digitalInput1CurrentAlarmStateFrame = payloadDecoded.state.current;\r\n            payloadOutput.attributes.digitalInput1AlarmGlobalCounter = payloadDecoded.counter.global;\r\n            payloadOutput.attributes.digitalInput1InstantaneousCounter = payloadDecoded.counter.instantaneous;\r\n        } else if (payloadDecoded.type === \"0x52 digital input 2 alarm\") {\r\n            payloadOutput.attributes.digitalInput2PreviousAlarmStateFrame = payloadDecoded.state.previousFrame;\r\n            payloadOutput.attributes.digitalInput2CurrentAlarmStateFrame = payloadDecoded.state.current;\r\n            payloadOutput.attributes.digitalInput2AlarmGlobalCounter = payloadDecoded.counter.global;\r\n            payloadOutput.attributes.digitalInput2InstantaneousCounter = payloadDecoded.counter.instantaneous;\r\n        } else if (payloadDecoded.type === \"0x53 Delta P periodic data\") {\r\n            payloadOutput.attributes.pressureValuesArray = absoluteValuesArray(payloadDecoded.deltaPressure.values);\r\n            payloadOutput.attributes.pressureUnit = payloadDecoded.deltaPressure.unit;\r\n        } else if (payloadDecoded.type === \"0x54 Delta P alarm\") {\r\n            payloadOutput.attributes.pressureAlarmStatus = payloadDecoded.alarmStatus;\r\n            payloadOutput.attributes.values = {\r\n                \"pressureUnit\": payloadDecoded.deltaPressure.unit,\r\n                \"pressureValue\": Math.abs(payloadDecoded.deltaPressure.value).toString()\r\n            };\r\n        } else if (payloadDecoded.type === \"0x55 Delta P - periodic 0-10 V\") {\r\n            payloadOutput.attributes.voltageValuesArray = absoluteValuesArray(payloadDecoded.voltage.values);\r\n            payloadOutput.attributes.voltageUnit = payloadDecoded.voltage.unit;\r\n        } else if (payloadDecoded.type === \"0x56 Delta P - alarm 0-10 V\") {\r\n            payloadOutput.attributes.voltageAlarmStatus = payloadDecoded.alarmStatus;\r\n            payloadOutput.attributes.values = {\r\n                \"voltageUnit\": payloadDecoded.voltage.unit,\r\n                \"voltageValue\": Math.abs(payloadDecoded.voltage.value).toString()\r\n            };\r\n        }\r\n    return payloadOutput;\r\n}\r\n\r\nvar payload = hexToBytes(data.data);\r\nvar payloadDecoded = Decoder(payload);\r\n\r\n\r\n// Result object with device/asset attributes/telemetry data\r\n\r\nvar result = createPayload(payloadDecoded);\r\n\r\nreturn result;",
    "encoder": null
  },
  "additionalInfo": {
    "description": ""
  }
}