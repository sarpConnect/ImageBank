{
  "name": "ADEUNIS - Quadrapus",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "decoder": "/** Helper functions **/\n\n'use strict';\n// var undefined = (void 0); // Paranoia\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nif (typeof Object.assign != 'function') {\n (function () {\n  Object.assign = function (target) {\n    //  'use strict';\n     // We must check against these specific cases.\n     if (target === undefined || target === null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n     }\n\n     var output = Object(target);\n     for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source !== undefined && source !== null) {\n         for (var nextKey in source) {\n          if (source.hasOwnProperty(nextKey)) {\n             output[nextKey] = source[nextKey];\n          }\n         }\n      }\n     }\n     return output;\n  };\n })();\n}\n\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nfunction hexToBytes(hex){\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;    \n}\n\n/** ADEUNIS CODEC **/\n\nfunction Buffer(string, encoding) {\n    return fromHexString(string);\n}\n\nBuffer.from = function (string, encoding) {\n    return fromHexString(string);\n};\n\nBuffer.alloc = function (length) {\n    return new Uint8Array(length);\n};\n\nUint8Array.prototype.readUInt16BE = function (offset) {\n    var dataView = new DataView(this.buffer);\n    return dataView.getUint16(offset);\n};\n\nUint8Array.prototype.readInt16BE = function (offset) {\n    var dataView = new DataView(this.buffer);\n    return dataView.getInt16(offset);\n};\n\nUint8Array.prototype.readUInt8 = function (offset) {\n    var dataView = new DataView(this.buffer);\n    return dataView.getUint8(offset);\n};\n\nUint8Array.prototype.readUInt32BE = function (offset) {\n    var dataView = new DataView(this.buffer);\n    return dataView.getUint32(offset);\n};\n\nUint8Array.prototype.writeUInt16BE = function (value, offset) {\n    var dataView = new DataView(this.buffer);\n    return dataView.setUint16(offset, value);\n};\n\nUint8Array.prototype.writeUInt8 = function (value, offset) {\n    var dataView = new DataView(this.buffer);\n    return dataView.setUint8(offset, value);\n};\n\nUint8Array.prototype.writeUInt32BE = function (value, offset) {\n    var dataView = new DataView(this.buffer);\n    return dataView.setUint32(offset, value);\n};\n\nUint8Array.prototype.toString = function () {\n    return toHexString(this);\n};\n\n/**\n * From hex string\n * @param {string} hexString \n */\nfunction fromHexString(hexString) {\n    var matches = hexString.match(/.{1,2}/g);\n    if (!matches) {\n        return new Uint8Array();\n    }\n\n    return new Uint8Array(\n        matches.map(function (byte) {\n            return parseInt(byte, 16);\n        })\n    );\n}\n\n/**\n * To hex string\n * @param {Uint8Array} bytes \n */\n// function toHexString(bytes) {\n//     return bytes.reduce(function (str, byte) {\n//         return str + byte.toString(16).padStart(2, '0');\n//     }, '');\n// }\n\nfunction toHexString(bytes) {\n   return bytes;\n}\n\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\nvar codec;\n(function (codec) {\n    var Decoder = /** @class */ (function () {\n        /**\n         * Constructor\n         * @param options option object\n         *   option.codecStorage: implementation of CodecStorage to use for external storage, leave blank if unknown\n         */\n        function Decoder(options) {\n            this.parsers = [\n                new codec.GenericStatusByteExtParser(),\n                new codec.Generic0x20Parser(),\n                new codec.Generic0x30Parser(),\n                new codec.Generic0x33Parser(),\n                new codec.DcStatusByteParser(),\n                new codec.Dc0x10Parser(),\n                new codec.Dc0x40Parser(),\n            ];\n            if (options && options.codecStorage) {\n                this.codecStorage = options.codecStorage;\n            }\n            else if (typeof localStorage !== 'undefined') {\n                this.codecStorage = localStorage;\n            }\n            else {\n                this.codecStorage = new codec.InternalCodecStorage();\n            }\n        }\n        /**\n         * Get supported device types and frame codes.\n         *\n         * The returned pairs are available for decoding.\n         */\n        Decoder.prototype.getSupported = function () {\n            var list = [];\n            this.parsers\n                .map(function (p) { return (p.deviceType.split('|').map(function (q) { return list.push({\n                    deviceType: q,\n                    frameCode: p.frameCode\n                }); })); });\n            return list;\n        };\n        /**\n         * Find device types\n         * @param payloadString\n         */\n        Decoder.prototype.findDeviceTypes = function (payloadString) {\n            if (!/^(?:[0-9a-f]{2}){2,}$/gi.test(payloadString)) {\n                return [];\n            }\n            var payload = Buffer.from(payloadString, 'hex');\n            var frameCode = payload[0];\n            var deviceTypesFull = this.parsers\n                .filter(function (p) { return p.frameCode === frameCode; })\n                .map(function (p) { return p.deviceType; });\n            return Array.from(new Set(deviceTypesFull));\n        };\n        /**\n         * @param payloadString \n         * @param devId \n         * @param network \n         * @returns\n         */\n        Decoder.prototype.decode = function (payloadString, devId, network) {\n            if (devId === void 0) { devId = 'tmpDevId'; }\n            if (network === void 0) { network = 'unknown'; }\n            if (!/^(?:[0-9a-f]{2}){2,}$/gi.test(payloadString)) {\n                return { type: 'Invalid' };\n            }\n            var payload = Buffer.from(payloadString, 'hex');\n            var frameCode = payload[0];\n            var deviceType = this.fetchDeviceType(devId);\n            var configuration;\n            if (frameCode === 0x10) {\n                configuration = payload;\n                this.storeConfiguration(configuration, devId);\n            }\n            else {\n                configuration = this.fetchConfiguration(devId);\n            }\n            var activeParsers = this.getActiveParsers(deviceType, frameCode);\n            var partialContents = activeParsers.map(function (p) {\n                var partialContent;\n                try {\n                    partialContent = p.parseFrame(payload, configuration, network, deviceType);\n                }\n                catch (error) {\n                    partialContent = { 'error': error.toString() };\n                }\n                return partialContent;\n            });\n            if (activeParsers.every(function (p) { return p.frameCode < 0; })) {\n                partialContents.push({ type: 'Unsupported' });\n            }\n            var content = Object.assign.apply(Object, [{}].concat(partialContents));\n            var typestr = content['type'];\n            delete content['type'];\n            content = Object.assign({ type: typestr }, content);\n            return content;\n        };\n        /**\n         * @param deviceType \n         * @param devId \n         */\n        Decoder.prototype.setDeviceType = function (deviceType, devId) {\n            if (devId === void 0) { devId = 'tmpDevId'; }\n            this.codecStorage.setItem(devId + \".deviceType\", deviceType);\n        };\n        /**\n         * @param devId\n         */\n        Decoder.prototype.clearStoredData = function (devId) {\n            var _this = this;\n            if (!devId) {\n                devId = 'tmpDevId';\n            }\n            ['deviceType', 'configuration']\n                .map(function (suffix) { return devId + \".\" + suffix; })\n                .forEach(function (key) { return _this.codecStorage.removeItem(key); });\n        };\n        /**\n         * @param devId\n         */\n        Decoder.prototype.fetchConfiguration = function (devId) {\n            if (!devId) {\n                return Buffer.from('');\n            }\n            var value = this.codecStorage.getItem(devId + \".configuration\");\n            return Buffer.from(value || '', 'hex');\n        };\n        /**\n         * @param payload\n         * @param devId\n         */\n        Decoder.prototype.storeConfiguration = function (payload, devId) {\n            if (!devId) {\n                return payload;\n            }\n            this.codecStorage.setItem(devId + \".configuration\", payload.toString('hex'));\n            return payload;\n        };\n        /**\n         * @param devId\n         */\n        Decoder.prototype.fetchDeviceType = function (devId) {\n            if (!devId) {\n                return '';\n            }\n            return this.codecStorage.getItem(devId + \".deviceType\") || '';\n        };\n        /**\n         * @param frameCode\n         * @param devId\n         */\n        Decoder.prototype.storeDeviceType = function (frameCode, devId) {\n            var deviceType = '';\n            if (!devId) {\n                return deviceType;\n            }\n            var matchingParsers = this.parsers.filter(function (p) { return p.deviceType !== 'any' && p.frameCode === frameCode; });\n            if (matchingParsers.length === 1) {\n                deviceType = matchingParsers[0].deviceType;\n                this.codecStorage.setItem(devId + \".deviceType\", deviceType);\n            }\n            return deviceType;\n        };\n        /**\n         * @param parser\n         * @param deviceType\n         */\n        Decoder.prototype.isCompatibleDeviceType = function (parser, deviceType) {\n            var list = parser.deviceType.split('|').filter(function (q) { return q === deviceType; });\n            return (list.length > 0) ? true : false;\n        };\n        /**\n         * @param deviceType\n         * @param frameCode\n         */\n        Decoder.prototype.getActiveParsers = function (deviceType, frameCode) {\n            var _this = this;\n            var activeParsers = [];\n            var dataParser = this.parsers.filter(function (p) { return _this.isCompatibleDeviceType(p, deviceType) &&\n                (p.frameCode < 0 || p.frameCode === frameCode); });\n            if (dataParser.length === 0 && deviceType !== 'repeater') {\n                var genericParsers = this.parsers.filter(function (p) { return p.deviceType === 'any' &&\n                    (p.frameCode < 0 || p.frameCode === frameCode); });\n                dataParser = activeParsers.concat(genericParsers);\n            }\n            if (dataParser.length > 0) {\n                var statusByteParsers = this.parsers.filter(function (p) { return _this.isCompatibleDeviceType(p, deviceType)\n                    && p.frameCode === 0; });\n                activeParsers = activeParsers.concat(statusByteParsers);\n                if (statusByteParsers.length === 0) {\n                    var genericStatusByteParsers = this.parsers.filter(function (p) { return p.deviceType === 'any' && p.frameCode === 0; });\n                    activeParsers = activeParsers.concat(genericStatusByteParsers);\n                }\n            }\n            activeParsers = activeParsers.concat(dataParser);\n            return activeParsers;\n        };\n        return Decoder;\n    }());\n    codec.Decoder = Decoder;\n})(codec || (codec = {}));\n\nif (typeof module !== 'undefined') {\n    module.exports = codec;\n}\nif (typeof process !== 'undefined' && process.env.NODE_ENV === 'test') {\n    global.codec = codec;\n}\nvar codec;\n(function (codec) {\n    var InternalCodecStorage = /** @class */ (function () {\n        function InternalCodecStorage() {\n            this.store = {};\n        }\n        InternalCodecStorage.prototype.getItem = function (key) {\n            return this.store[key];\n        };\n        InternalCodecStorage.prototype.removeItem = function (key) {\n            delete this.store[key];\n        };\n        InternalCodecStorage.prototype.setItem = function (key, value) {\n            this.store[key] = value;\n        };\n        return InternalCodecStorage;\n    }());\n    codec.InternalCodecStorage = InternalCodecStorage;\n})(codec || (codec = {}));\n\nvar codec;\n(function (codec) {\n    var Dc0x10Parser = /** @class */ (function () {\n        function Dc0x10Parser() {\n            this.deviceType = 'dc';\n            this.frameCode = 0x10;\n        }\n        Dc0x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x10 Dry Contacts configuration' };\n            appContent['productMode'] = codec.PlateformCommonUtils.getProductModeText(payload[8]);\n            if (payload[8] === 1) {\n                appContent['keepAlivePeriod'] = { 'unit': 'm', 'value': payload.readUInt8(2) * 10 };\n                appContent['transmitPeriod'] = { 'unit': 'm', 'value': payload.readUInt8(3) * 10 };\n            }\n            else {\n                appContent['keepAlivePeriod'] = { 'unit': 's', 'value': payload.readUInt8(2) * 20 };\n                appContent['transmitPeriod'] = { 'unit': 's', 'value': payload.readUInt8(3) * 20 };\n            }\n            var debounce = this.getDebounceText(payload[4] >> 4);\n            var type = this.getTypeText(payload[4] & 0x0f);\n            if (type[0] === 'disabled') {\n                appContent['channelA'] = { 'type': type[0] };\n            }\n            else {\n                appContent['channelA'] = { 'type': type[0], 'edge': type[1],\n                    'debounceDuration': { 'unit': debounce[1], 'value': debounce[0] } };\n            }\n            debounce = this.getDebounceText(payload[5] >> 4);\n            type = this.getTypeText(payload[5] & 0x0f);\n            if (type[0] === 'disabled') {\n                appContent['channelB'] = { 'type': type[0] };\n            }\n            else {\n                appContent['channelB'] = { 'type': type[0], 'edge': type[1],\n                    'debounceDuration': { 'unit': debounce[1], 'value': debounce[0] } };\n            }\n            debounce = this.getDebounceText(payload[6] >> 4);\n            type = this.getTypeText(payload[6] & 0x0f);\n            if (type[0] === 'disabled') {\n                appContent['channelC'] = { 'type': type[0] };\n            }\n            else {\n                appContent['channelC'] = { 'type': type[0], 'edge': type[1],\n                    'debounceDuration': { 'unit': debounce[1], 'value': debounce[0] } };\n            }\n            debounce = this.getDebounceText(payload[7] >> 4);\n            type = this.getTypeText(payload[7] & 0x0f);\n            if (type[0] === 'disabled') {\n                appContent['channelD'] = { 'type': type[0] };\n            }\n            else {\n                appContent['channelD'] = { 'type': type[0], 'edge': type[1],\n                    'debounceDuration': { 'unit': debounce[1], 'value': debounce[0] } };\n            }\n            return appContent;\n        };\n        /**\n         * @param value\n         */\n        Dc0x10Parser.prototype.getTypeText = function (value) {\n            if (value === 0) {\n                return ['disabled', ''];\n            } else if (value === 1) {\n                return ['inputPeriodic', 'high'];\n            } else if (value === 2) {\n                return ['inputPeriodic', 'low'];\n            } else if (value === 3) {\n               return ['inputPeriodic', 'both']; \n            } else if (value === 4) {\n                return ['inputEvent', 'high'];\n            } else if (value === 5) {\n                return ['inputEvent', 'low'];\n            } else if (value === 6) {\n                return ['inputEvent', 'both'];\n            } else if (value === 7) {\n                return ['output', 'high'];\n            } else if (value === 8) {\n                return ['output', 'low'];\n            } else {\n                return ['disabled', ''];\n            }\n        };\n        /**\n         * @param value value\n         */\n        Dc0x10Parser.prototype.getDebounceText = function (value) {\n            if (value === 0) {\n                return [0, 's'];\n            } else if (value === 1) {\n                return [10, 'ms'];\n            } else if (value === 2) {\n                return [20, 'ms'];\n            } else if (value === 3) {\n                return [50, 'ms'];\n            } else if (value === 4) {\n                return [100, 'ms'];\n            } else if (value === 5) {\n                return [200, 'ms'];\n            } else if (value === 6) {\n                return [500, 'ms'];\n            } else if (value === 7) {\n                return [1, 's'];\n            } else if (value === 8) {\n                return [2, 's'];\n            } else if (value === 9) {\n                return [5, 's'];\n            } else if (value === 10) {\n                return [10, 's'];\n            } else if (value === 11) {\n                return [20, 's'];\n            } else if (value === 12) {\n                return [40, 's'];\n            } else if (value === 13) {\n                return [60, 's'];\n            } else if (value === 14) {\n                return [5, 'm'];\n            } else if (value === 15) {\n                return [10, 'm'];\n            } else {\n                return [0, 's'];\n            }\n        };\n        return Dc0x10Parser;\n    }());\n    codec.Dc0x10Parser = Dc0x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Dc0x40Parser = /** @class */ (function () {\n        function Dc0x40Parser() {\n            this.deviceType = 'dc';\n            this.frameCode = 0x40;\n        }\n        Dc0x40Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x40 Dry Contacts data' };\n            appContent['decodingInfo'] = 'true: ON/CLOSED, false: OFF/OPEN';\n            appContent['channelA'] = { 'value': payload.readUInt16BE(2), 'currentState': Boolean(payload[10] & 0x01),\n                'previousFrameState': Boolean(payload[10] & 0x02) };\n            appContent['channelB'] = { 'value': payload.readUInt16BE(4), 'currentState': Boolean(payload[10] & 0x04),\n                'previousFrameState': Boolean(payload[10] & 0x08) };\n            appContent['channelC'] = { 'value': payload.readUInt16BE(6), 'currentState': Boolean(payload[10] & 0x10),\n                'previousFrameState': Boolean(payload[10] & 0x20) };\n            appContent['channelD'] = { 'value': payload.readUInt16BE(8), 'currentState': Boolean(payload[10] & 0x40),\n                'previousFrameState': Boolean(payload[10] & 0x80) };\n            return appContent;\n        };\n        return Dc0x40Parser;\n    }());\n    codec.Dc0x40Parser = Dc0x40Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var DcStatusByteParser = /** @class */ (function () {\n        function DcStatusByteParser() {\n            this.deviceType = 'dc';\n            this.frameCode = 0;\n        }\n        DcStatusByteParser.prototype.parseFrame = function (payload, configuration) {\n            var statusContent = {};\n            var parser = new codec.GenericStatusByteParser();\n            statusContent = parser.parseFrame(payload, configuration);\n            return { 'status': statusContent };\n        };\n        return DcStatusByteParser;\n    }());\n    codec.DcStatusByteParser = DcStatusByteParser;\n})(codec || (codec = {}));\n\nvar codec;\n(function (codec) {\n    var Generic0x20Parser = /** @class */ (function () {\n        function Generic0x20Parser() {\n            this.deviceType = 'any';\n            this.frameCode = 0x20;\n        }\n        Generic0x20Parser.prototype.parseFrame = function (payload, configuration, network, deviceType) {\n            var appContent = { type: '0x20 Configuration' };\n            if(payload.byteLength === 4) {\n                appContent['loraAdr'] = Boolean(payload[2] & 0x01);\n                appContent['loraProvisioningMode'] = (payload[3] === 0) ? 'ABP' : 'OTAA';\n                if (payload[2] & 0x04) {\n                    appContent['loraDutycyle'] = 'activated';\n                }\n                else if (deviceType === 'temp3' || deviceType === 'pulse3') {\n                    appContent['loraDutycyle'] = 'deactivated';\n                }\n                appContent['loraClassMode'] = (payload[2] & 0x20) ? 'CLASS C' : 'CLASS A';\n            } else if (payload.byteLength === 3) {\n                appContent['sigfoxRetry'] = (payload[2] & 0x03);\n            } else {\n                appContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;\n            }\n            return appContent;\n        };\n        return Generic0x20Parser;\n    }());\n    codec.Generic0x20Parser = Generic0x20Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Generic0x30Parser = /** @class */ (function () {\n        function Generic0x30Parser() {\n            this.deviceType = 'any';\n            this.frameCode = 0x30;\n        }\n        Generic0x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x30 Keep alive' };\n            return appContent;\n        };\n        return Generic0x30Parser;\n    }());\n    codec.Generic0x30Parser = Generic0x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Generic0x33Parser = /** @class */ (function () {\n        function Generic0x33Parser() {\n            this.deviceType = 'dc|pulse3|temp3|comfort|motion||deltap';\n            this.frameCode = 0x33;\n        }\n        Generic0x33Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x33 Set register status' };\n            appContent['requestStatus'] = this.getRequestStatusText(payload[2]);\n            appContent['registerId'] = payload.readUInt16BE(3);\n            return appContent;\n        };\n        /**\n         * @param value value\n         */\n        Generic0x33Parser.prototype.getRequestStatusText = function (value) {\n            if (value === 1) {\n                return 'success';\n            } else if (value === 2) {\n                return 'successNoUpdate';\n            } else if (value === 3) {\n                return 'errorCoherency';\n            } else if (value === 4) {\n                return 'errorInvalidRegister';\n            } else if (value === 5) {\n                return 'errorInvalidValue';\n            } else if (value === 6) {\n                return 'errorTruncatedValue';\n            } else if (value === 7) {\n                return 'errorAccesNotAllowed';\n            } else {\n                return 'errorOtherReason';\n            }\n        };\n        return Generic0x33Parser;\n    }());\n    codec.Generic0x33Parser = Generic0x33Parser;\n})(codec || (codec = {}));\n\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\nvar codec;\n(function (codec) {\n    var GenericStatusByteExtParser = /** @class */ (function () {\n        function GenericStatusByteExtParser() {\n            this.deviceType = 'any';\n            this.frameCode = 0;\n        }\n        GenericStatusByteExtParser.prototype.parseFrame = function (payload, configuration) {\n            var statusContent = {};\n            var parser = new codec.GenericStatusByteParser();\n            statusContent = parser.parseFrame(payload, configuration);\n            statusContent['configurationInconsistency'] = Boolean(payload[1] & 0x08);\n            return { 'status': statusContent };\n        };\n        return GenericStatusByteExtParser;\n    }());\n    codec.GenericStatusByteExtParser = GenericStatusByteExtParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var GenericStatusByteParser = /** @class */ (function () {\n        function GenericStatusByteParser() {\n            this.deviceType = 'any';\n            this.frameCode = 0;\n        }\n        GenericStatusByteParser.prototype.parseFrame = function (payload, configuration) {\n            var statusContent = {};\n            statusContent['frameCounter'] = (payload[1] & 0xe0) >> 5;\n            statusContent['hardwareError'] = Boolean(payload[1] & 0x04);\n            statusContent['lowBattery'] = Boolean(payload[1] & 0x02);\n            statusContent['configurationDone'] = Boolean(payload[1] & 0x01);\n            return statusContent;\n        };\n        return GenericStatusByteParser;\n    }());\n    codec.GenericStatusByteParser = GenericStatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var PartialDecodingReason;\n    (function (PartialDecodingReason) {\n        PartialDecodingReason[PartialDecodingReason[\"NONE\"] = 0] = \"NONE\";\n        PartialDecodingReason[PartialDecodingReason[\"MISSING_NETWORK\"] = 1] = \"MISSING_NETWORK\";\n        PartialDecodingReason[PartialDecodingReason[\"MISSING_CONFIGURATION\"] = 2] = \"MISSING_CONFIGURATION\";\n    })(PartialDecodingReason = codec.PartialDecodingReason || (codec.PartialDecodingReason = {}));\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var ContentImpl = /** @class */ (function () {\n        function ContentImpl(type) {\n            if (type === void 0) { type = 'Unknown'; }\n            this.type = type;\n            this.partialDecoding = codec.PartialDecodingReason.NONE;\n        }\n        ContentImpl.merge = function () {\n            var contents = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                contents[_i] = arguments[_i];\n            }\n            if (!contents || contents.length === 0) {\n                return null;\n            }\n            return Object.assign.apply(Object, [new ContentImpl(contents[0].type)].concat(contents));\n        };\n        ContentImpl.prototype.merge = function () {\n            var contents = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                contents[_i] = arguments[_i];\n            }\n            return ContentImpl.merge.apply(ContentImpl, [this].concat(contents));\n        };\n        return ContentImpl;\n    }());\n    codec.ContentImpl = ContentImpl;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var PlateformCommonUtils = /** @class */ (function () {\n        function PlateformCommonUtils() {\n        }\n        /**\n         * @param value value\n         */\n        PlateformCommonUtils.getProductModeText = function (value) {\n            if (value === 0) {\n                return 'PARK';\n            } else if (value === 1) {\n                return 'PRODUCTION';\n            } else if (value === 2) {\n                return 'TEST';\n            } else if (value === 3) {\n                return 'DEAD';\n            } else {\n                return '';\n            }\n        };\n        return PlateformCommonUtils;\n    }());\n    codec.PlateformCommonUtils = PlateformCommonUtils;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var DecoderProducts;\n    (function (DecoderProducts) {\n        DecoderProducts[\"analog\"] = \"Analog\";\n        DecoderProducts[\"comfort\"] = \"Comfort\";\n        DecoderProducts[\"dc\"] = \"Dry Contacts\";\n        DecoderProducts[\"deltap\"] = \"Delta P\";\n        DecoderProducts[\"motion\"] = \"Motion\";\n        DecoderProducts[\"pulse\"] = \"Pulse\";\n        DecoderProducts[\"pulse3\"] = \"Pulse 3\";\n        DecoderProducts[\"repeater\"] = \"Repeater\";\n        DecoderProducts[\"temp\"] = \"Temp\";\n        DecoderProducts[\"temp3\"] = \"Temp 3\";\n        DecoderProducts[\"ticCbeLinkyMono\"] = \"TIC CBE/LINKY MONO\";\n        DecoderProducts[\"ticCbeLinkyTri\"] = \"TIC CBE/LINKY TRI\";\n    })(DecoderProducts = codec.DecoderProducts || (codec.DecoderProducts = {}));\n})(codec || (codec = {}));\n\nfunction base64tohex(bytes) {\n    return bytes.map(function (byte) {\n        return (\"00\" + (byte & 0xFF).toString(16)).slice(-2)\n    }).join('')\n}\n\nfunction Decoder(bytes, port) {\n    var decoder = new codec.Decoder();\n    decoder.setDeviceType(\"dc\");\n\n    return decoder.decode(base64tohex(bytes));\n}\n\n/** MSG GENERE **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\nvar data = decodeToJson(payload);\nvar payload = hexToBytes(data.data);\nvar payloadDecoded =  new Decoder(payload);\n\n\n// function timeConverter(UNIX_timestamp){\n//   var a = new Date(UNIX_timestamp);\n//   var months = ['Janvier','Févier','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'];\n//   var days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\n//   var year = a.getFullYear();\n//   var month = months[a.getMonth()];\n//   var day = days[a.getDay()];\n//   var date = a.getDate() < 10 ? '0' + a.getDate() : a.getDate();\n//   var hour = a.getHours() < 10 ? '0' + a.getHours() : a.getHours();\n//   var min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\n//   var sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\n//   var time = day + ' ' + date + ' ' + month + ' ' + year + ' - ' + hour + ':' + min + ':' + sec ;\n//   return time;\n// }\n\nfunction timeConverter(UNIX_timestamp) {\n  var a = new Date(UNIX_timestamp);\n  var year = a.getFullYear();\n  var month = (a.getMonth() + 1) < 10 ? '0' + (a.getMonth() + 1) : (a.getMonth() + 1);\n  var date = a.getDate() < 10 ? '0' + a.getDate() : a.getDate();\n  var hour = a.getHours() < 10 ? '0' + a.getHours() : a.getHours();\n  var min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\n  var sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\n//   var time = `${year}/${month}/${date} - ${hour}:${min}:${sec}`;\n  var time = year + '/' + month + '/' + date + ' - ' + hour + ':' + min + ':' + sec;\n  return time;\n}\n\nfunction lqiConverter(lqi) {\n    if(lqi === \"Excellent\") {\n        return \"Excellent\";\n    } else if(lqi === \"Good\") {\n        return \"Bon\";\n    } else if(lqi === \"Average\") {\n        return \"Moyen\";\n    } else if(lqi === \"Limit\") {\n        return \"Mauvais\";\n    } else {\n        return \"\";\n    }\n}\n\nfunction createPayload(payloadDecoded){\n    \n    var payloadOutput = {};\n    \n        // valeurs qui ne dépendent pas du type de message entrant\n        payloadOutput = {\n            \"deviceName\": data.deviceName,\n            \"deviceType\": \"Quadrapus\",\n            \"attributes\": {\n                \"deviceName\": data.deviceName,\n                \"deviceType\": \"Quadrapus\",\n                \"ts\": data.time*1000,\n                \"lastMessage\": timeConverter(data.time*1000),\n                \"frameCounter\": payloadDecoded.status.frameCounter,\n                \"hardwareError\": payloadDecoded.status.hardwareError,\n                \"lowBattery\": payloadDecoded.status.lowBattery,\n                \"configurationDone\": payloadDecoded.status.configurationDone,\n                \"signalValue\": lqiConverter(data.lqi),\n                \"msgType\": payloadDecoded.type,\n                \"indicator\": \"ON\"\n            }\n        };\n        \n        if(payloadDecoded.type === \"0x10 Dry Contacts configuration\"){\n            payloadOutput.attributes.productMode = payloadDecoded.productMode;\n            payloadOutput.attributes.keepAlivePeriodUnit = payloadDecoded.keepAlivePeriod.unit;\n            payloadOutput.attributes.keepAlivePeriodValue = payloadDecoded.keepAlivePeriod.value;\n            payloadOutput.attributes.transmitPeriodUnit = payloadDecoded.transmitPeriod.unit;\n            payloadOutput.attributes.transmitPeriodValue = payloadDecoded.transmitPeriod.value;\n\n            payloadOutput.attributes.channelAConfigurationType = payloadDecoded.channelA.type;\n            if(payloadDecoded.channelA.type !== \"disabled\"){\n                payloadOutput.attributes.channelAConfigurationEdge = payloadDecoded.channelA.edge,\n                payloadOutput.attributes.channelAConfigurationDebounceDurationUnit = payloadDecoded.channelA.debounceDuration.unit;\n                payloadOutput.attributes.channelAConfigurationDebounceDurationValue = payloadDecoded.channelA.debounceDuration.value;\n            }\n\n            payloadOutput.attributes.channelBConfigurationType = payloadDecoded.channelB.type;\n            if(payloadDecoded.channelB.type !== \"disabled\"){\n                payloadOutput.attributes.channelBConfigurationEdge = payloadDecoded.channelB.edge,\n                payloadOutput.attributes.channelBConfigurationDebounceDurationUnit = payloadDecoded.channelB.debounceDuration.unit;\n                payloadOutput.attributes.channelBConfigurationDebounceDurationValue = payloadDecoded.channelB.debounceDuration.value;\n            }\n\n            payloadOutput.attributes.channelCConfigurationType = payloadDecoded.channelC.type;\n            if(payloadDecoded.channelC.type !== \"disabled\"){\n                payloadOutput.attributes.channelCConfigurationEdge = payloadDecoded.channelC.edge,\n                payloadOutput.attributes.channelCConfigurationDebounceDurationUnit = payloadDecoded.channelC.debounceDuration.unit;\n                payloadOutput.attributes.channelCConfigurationDebounceDurationValue = payloadDecoded.channelC.debounceDuration.value;\n            }\n\n            payloadOutput.attributes.channelDConfigurationType = payloadDecoded.channelD.type;\n            if(payloadDecoded.channelD.type !== \"disabled\"){\n                payloadOutput.attributes.channelDConfigurationEdge = payloadDecoded.channelD.edge,\n                payloadOutput.attributes.channelDConfigurationDebounceDurationUnit = payloadDecoded.channelD.debounceDuration.unit;\n                payloadOutput.attributes.channelDConfigurationDebounceDurationValue = payloadDecoded.channelD.debounceDuration.value;\n            }\n\n        } else if (payloadDecoded.type === \"0x20 Configuration\") {\n            payloadOutput.attributes.loraAdr = payloadDecoded.loraAdr;\n            payloadOutput.attributes.loraProvisioningMode = payloadDecoded.loraProvisioningMode;\n            payloadOutput.attributes.loraClassMode = payloadDecoded.loraClassMode;\n            if(payloadDecoded.loraDutycyle !== undefined) {\n                payloadOutput.attributes.loraDutyCycle = payloadDecoded.loraDutycyle;\n            }\n        } else if (payloadDecoded.type === \"0x40 Dry Contacts data\") {\n            payloadOutput.attributes.decodingInfo = payloadDecoded.decodingInfo;\n            payloadOutput.attributes.channelAValue = payloadDecoded.channelA.value;\n            payloadOutput.attributes.channelACurrentState = payloadDecoded.channelA.currentState;\n            payloadOutput.attributes.channelAPreviousFrameState = payloadDecoded.channelA.previousFrameState;\n            payloadOutput.attributes.channelBValue = payloadDecoded.channelB.value;\n            payloadOutput.attributes.channelBCurrentState = payloadDecoded.channelB.currentState;\n            payloadOutput.attributes.channelBPreviousFrameState = payloadDecoded.channelB.previousFrameState;\n            payloadOutput.attributes.channelCValue = payloadDecoded.channelC.value;\n            payloadOutput.attributes.channelCCurrentState = payloadDecoded.channelC.currentState;\n            payloadOutput.attributes.channelCPreviousFrameState = payloadDecoded.channelC.previousFrameState;\n            payloadOutput.attributes.channelDValue = payloadDecoded.channelD.value;\n            payloadOutput.attributes.channelDCurrentState = payloadDecoded.channelD.currentState;\n            payloadOutput.attributes.channelDPreviousFrameState = payloadDecoded.channelD.previousFrameState;\n        }\n    return payloadOutput;\n}\n\n// Result object with device/asset attributes/telemetry data\n\nvar result = createPayload(payloadDecoded);\n\nreturn result;",
    "encoder": null
  },
  "additionalInfo": {
    "description": ""
  }
}